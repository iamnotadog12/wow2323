local keys, network = loadstring(game:HttpGet("https://raw.githubusercontent.com/Introvert1337/RobloxReleases/main/Scripts/Jailbreak/KeyFetcher.lua"))()
local tagUtils = require(game:GetService("ReplicatedStorage").Tag.TagUtils)
local RunService = game:GetService("RunService")
local swimming = false
local swimbeat = nil
local gravReset = nil

local oldIsPointInTag
tagUtils.isPointInTag = function(point, tag)
    if tag == "NoRagdoll" or tag == "NoFallDamage" then 
        return true
    end
    
    return oldIsPointInTag(point, tag)
end

local function Tp(...)
    if _G.executed then
        print("Already running")
        return
    end
    
    _G.executed = true
    
    if not swimming and game.Players.LocalPlayer and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid") then
        workspace.Gravity = 0
        local swimDied = function()
            workspace.Gravity = 196.1999969482422
            swimming = false
        end
        local Humanoid = game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid")
        gravReset = Humanoid.Died:Connect(swimDied)
        local enums = Enum.HumanoidStateType:GetEnumItems()
        table.remove(enums, table.find(enums, Enum.HumanoidStateType.None))
        for i, v in pairs(enums) do
            Humanoid:SetStateEnabled(v, false)
        end
        Humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
        swimbeat = RunService.Heartbeat:Connect(function()
            pcall(function()
                game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = ((Humanoid.MoveDirection ~= Vector3.new() or game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.Space)) and game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity or Vector3.new())
            end)
        end)
        swimming = true
    end
    
    local char = game.Players.LocalPlayer.Character
    local humanoid = char.Humanoid
    local root = char.HumanoidRootPart
    local args = {...}
    local target = Vector3.new(unpack(args, 1, 3))
    
    local distanceThreshold = 5
    local velocity = 5
    
    humanoid:ChangeState(Enum.HumanoidStateType.Physics)

    local targetUp = root.Position + Vector3.new(0, 500, 0)
    local directionUp = (targetUp - root.Position).Unit
    
    while (root.Position - targetUp).Magnitude > distanceThreshold do
        wait()
        local newPositionUp = root.Position + directionUp * velocity
        
        local rayUp = Ray.new(root.Position, directionUp * velocity)
        local ignoreListUp = {char}
        local hitPartUp, hitPositionUp, hitNormalUp = workspace:FindPartOnRayWithIgnoreList(rayUp, ignoreListUp)
        
        if hitPartUp then
            root.CFrame = CFrame.new(hitPositionUp + hitNormalUp * distanceThreshold) + Vector3.new(0, 5, 0) -- Adjust the upward offset as needed
        else
            root.CFrame = CFrame.new(newPositionUp)
        end
    end
    
    wait()

    local targetXZ = Vector3.new(target.X, root.Position.Y, target.Z)
    local directionXZ = (targetXZ - root.Position).Unit
    
    while (root.Position - targetXZ).Magnitude > distanceThreshold do
        wait()
        local newPositionXZ = root.Position + directionXZ * velocity
        
        local rayXZ = Ray.new(root.Position, directionXZ * velocity)
        local ignoreListXZ = {char}
        local hitPartXZ, hitPositionXZ, hitNormalXZ = workspace:FindPartOnRayWithIgnoreList(rayXZ, ignoreListXZ)
        
        if hitPartXZ then
            root.CFrame = CFrame.new(hitPositionXZ + hitNormalXZ * distanceThreshold) + Vector3.new(0, 5, 0) -- Adjust the upward offset as needed
        else
            root.CFrame = CFrame.new(newPositionXZ)
        end
    end

    local targetDown = target
    local directionDown = (targetDown - root.Position).Unit
    
    while (root.Position - targetDown).Y > distanceThreshold do
        wait()
        local newPositionDown = root.Position + directionDown * velocity
        
        local rayDown = Ray.new(root.Position, Vector3.new(0, -1, 0) * velocity)
        local ignoreListDown = {char}
        local hitPartDown, hitPositionDown, hitNormalDown = workspace:FindPartOnRayWithIgnoreList(rayDown, ignoreListDown)
        
        if hitPartDown then
            break
        else
            root.CFrame = CFrame.new(newPositionDown)
        end
    end
    
    humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)

    if game.Players.LocalPlayer and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid") then
        workspace.Gravity = 196.1999969482422
        swimming = false
        if gravReset then
            gravReset:Disconnect()
        end
        if swimbeat then
            swimbeat:Disconnect()
            swimbeat = nil
        end
        local Humanoid = game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid")
        local enums = Enum.HumanoidStateType:GetEnumItems()
        table.remove(enums, table.find(enums, Enum.HumanoidStateType.None))
        for i, v in pairs(enums) do
            Humanoid:SetStateEnabled(v, true)
        end
    end
    
    _G.executed = false
end

local locations = {
    ["bank"] = { targetX = -1, targetZ = 865 },
    ["escape"] = { targetX = -941, targetZ = -1445 },
    ["jewl bottom"] = { targetX = 77, targetZ = 1314 },
    ["jewl top"] = { targetX = 101, targetZ = 1305 },
    ["museum"] = { targetX = 1114, targetZ = 1293 },
    ["power plant"] = { targetX = 83, targetZ = 2343 },
    ["gas station"] = { targetX = -1566, targetZ = 706 },
    ["donut shop"] = { targetX = 93, targetZ = -1515 },
    ["casino"] = { targetX = -202, targetZ = -4574 },
    ["mansion"] = { targetX = 3043, targetZ = -4541 },
    ["trading plaza"] = { targetX = 2681, targetZ = -3836 },
    ["tomb"] = { targetX = 587, targetZ = -483 },
    ["airport"] = { targetX = -1414, targetZ = 2954 }
    ["test"] = { targetX = 61, targetZ = 61, 34, 36 },

}

local function teleportToLocation(location)
    local target = locations[location]
    if target then
        Tp(target.targetX, 0, target.targetZ)
    else
        print("Invalid location:", location)
    end
end

local location = "jewl top"

teleportToLocation(location)
